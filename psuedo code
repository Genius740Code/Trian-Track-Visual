Class TrackGenerator:
    Initialize with seed, step_length, num_points, and num_stations
        Set random generator using seed
        Set current_position to origin (0, 0)
        Initialize direction angle and tracking variables
        Set limits for turn angles and backtracking
        Initialize empty station_indices list
    
    Function calculate_station_positions():
        If num_stations <= 1: return empty list
        Calculate base_spacing = num_points / (num_stations + 1)
        For each station (1 to num_stations):
            Calculate ideal_position = station_number * base_spacing
            Add random variation (±15% of base_spacing)
            Ensure position stays within bounds and minimum distance from previous
            Add to station_positions list
        Return station_positions
    
    Function normalize_angle(angle):
        Return angle normalized between -180 and 180
    
    Function get_smoothed_angle():
        Return average of last 3 direction angles
    
    Function would_cause_backtrack(proposed_angle):
        If angle difference from initial direction > threshold or total turning > max:
            Return True
        Else:
            Return False
    
    Function get_safe_turn_angle(desired_angle):
        Calculate new angle = current angle + desired_angle
        If this causes backtracking:
            Try reducing angle or changing direction
            If still invalid, set angle to 0
        Return safe angle
    
    Function start_big_turn():
        Randomly choose big turn angle (20–50 deg, positive or negative)
        Adjust angle to prevent backtracking
        Set target angle
        Choose number of steps for smooth turn
        Calculate angle increment per step
        Set turning flag True and log turn start index
    
    Function step_turn():
        If turning steps remain:
            Calculate next angle
            If not backtracking:
                Apply angle and decrement remaining steps
            Else:
                Stop the turn early
        Else:
            End turn and set target to current angle
    
    Function generate_next_point():
        If turning:
            step_turn()
        Else:
            If steps_until_next_turn > 0:
                Decrement step counter
                Add small noise to angle
                Apply only if no backtracking
            Else:
                Randomly choose small or big turn
                If small turn (85% chance):
                    Pick small turn angle (2–15 deg)
                    Adjust safely and apply
                    Record turn if significant
                Else:
                    start_big_turn()
        Move forward using current direction and step_length
        Update current_position and store it in track_points
    
    Function generate_full_track():
        Calculate station_positions using calculate_station_positions()
        For each step from 0 to num_points:
            Call generate_next_point()
            If current step is in station_positions:
                Add current track point index to station_indices
        Return track_points, turn_indices, and station_indices
